// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package sbac

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Opcode int32

const (
	Opcode_UNKNOWN         Opcode = 0
	Opcode_ADD_TRANSACTION Opcode = 1
	Opcode_QUERY_OBJECT    Opcode = 2
	Opcode_CREATE_OBJECT   Opcode = 3
	Opcode_STATES          Opcode = 4
	Opcode_SBAC            Opcode = 5
	Opcode_CREATE_OBJECTS  Opcode = 6
)

var Opcode_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADD_TRANSACTION",
	2: "QUERY_OBJECT",
	3: "CREATE_OBJECT",
	4: "STATES",
	5: "SBAC",
	6: "CREATE_OBJECTS",
}
var Opcode_value = map[string]int32{
	"UNKNOWN":         0,
	"ADD_TRANSACTION": 1,
	"QUERY_OBJECT":    2,
	"CREATE_OBJECT":   3,
	"STATES":          4,
	"SBAC":            5,
	"CREATE_OBJECTS":  6,
}

func (x Opcode) String() string {
	return proto.EnumName(Opcode_name, int32(x))
}
func (Opcode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type ObjectStatus int32

const (
	ObjectStatus_ACTIVE   ObjectStatus = 0
	ObjectStatus_INACTIVE ObjectStatus = 1
	ObjectStatus_LOCKED   ObjectStatus = 2
)

var ObjectStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
	2: "LOCKED",
}
var ObjectStatus_value = map[string]int32{
	"ACTIVE":   0,
	"INACTIVE": 1,
	"LOCKED":   2,
}

func (x ObjectStatus) String() string {
	return proto.EnumName(ObjectStatus_name, int32(x))
}
func (ObjectStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type SBACOp int32

const (
	SBACOp_Phase1 SBACOp = 0
	SBACOp_Phase2 SBACOp = 1
	SBACOp_Commit SBACOp = 2
)

var SBACOp_name = map[int32]string{
	0: "Phase1",
	1: "Phase2",
	2: "Commit",
}
var SBACOp_value = map[string]int32{
	"Phase1": 0,
	"Phase2": 1,
	"Commit": 2,
}

func (x SBACOp) String() string {
	return proto.EnumName(SBACOp_name, int32(x))
}
func (SBACOp) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type SBACDecision int32

const (
	SBACDecision_ACCEPT SBACDecision = 0
	SBACDecision_REJECT SBACDecision = 1
)

var SBACDecision_name = map[int32]string{
	0: "ACCEPT",
	1: "REJECT",
}
var SBACDecision_value = map[string]int32{
	"ACCEPT": 0,
	"REJECT": 1,
}

func (x SBACDecision) String() string {
	return proto.EnumName(SBACDecision_name, int32(x))
}
func (SBACDecision) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type ConsensusOp int32

const (
	ConsensusOp_Consensus1 ConsensusOp = 0
	ConsensusOp_Consensus2 ConsensusOp = 1
	ConsensusOp_Consensus3 ConsensusOp = 2
)

var ConsensusOp_name = map[int32]string{
	0: "Consensus1",
	1: "Consensus2",
	2: "Consensus3",
}
var ConsensusOp_value = map[string]int32{
	"Consensus1": 0,
	"Consensus2": 1,
	"Consensus3": 2,
}

func (x ConsensusOp) String() string {
	return proto.EnumName(ConsensusOp_name, int32(x))
}
func (ConsensusOp) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

type Transaction struct {
	Traces []*Trace `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Transaction) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type Strings struct {
	Strs []string `protobuf:"bytes,1,rep,name=strs" json:"strs,omitempty"`
}

func (m *Strings) Reset()                    { *m = Strings{} }
func (m *Strings) String() string            { return proto.CompactTextString(m) }
func (*Strings) ProtoMessage()               {}
func (*Strings) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Strings) GetStrs() []string {
	if m != nil {
		return m.Strs
	}
	return nil
}

type Trace struct {
	ContractID               string     `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	Procedure                string     `protobuf:"bytes,2,opt,name=procedure,proto3" json:"procedure,omitempty"`
	InputObjectVersionIDs    [][]byte   `protobuf:"bytes,3,rep,name=inputObjectVersionIDs" json:"inputObjectVersionIDs,omitempty"`
	InputReferenceVersionIDs [][]byte   `protobuf:"bytes,4,rep,name=inputReferenceVersionIDs" json:"inputReferenceVersionIDs,omitempty"`
	OutputObjects            [][]byte   `protobuf:"bytes,5,rep,name=outputObjects" json:"outputObjects,omitempty"`
	Parameters               [][]byte   `protobuf:"bytes,6,rep,name=parameters" json:"parameters,omitempty"`
	Returns                  [][]byte   `protobuf:"bytes,7,rep,name=returns" json:"returns,omitempty"`
	Labels                   []*Strings `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty"`
	Dependencies             []*Trace   `protobuf:"bytes,9,rep,name=dependencies" json:"dependencies,omitempty"`
	InputObjects             [][]byte   `protobuf:"bytes,10,rep,name=inputObjects" json:"inputObjects,omitempty"`
	InputReferences          [][]byte   `protobuf:"bytes,11,rep,name=inputReferences" json:"inputReferences,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *Trace) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *Trace) GetProcedure() string {
	if m != nil {
		return m.Procedure
	}
	return ""
}

func (m *Trace) GetInputObjectVersionIDs() [][]byte {
	if m != nil {
		return m.InputObjectVersionIDs
	}
	return nil
}

func (m *Trace) GetInputReferenceVersionIDs() [][]byte {
	if m != nil {
		return m.InputReferenceVersionIDs
	}
	return nil
}

func (m *Trace) GetOutputObjects() [][]byte {
	if m != nil {
		return m.OutputObjects
	}
	return nil
}

func (m *Trace) GetParameters() [][]byte {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Trace) GetReturns() [][]byte {
	if m != nil {
		return m.Returns
	}
	return nil
}

func (m *Trace) GetLabels() []*Strings {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Trace) GetDependencies() []*Trace {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Trace) GetInputObjects() [][]byte {
	if m != nil {
		return m.InputObjects
	}
	return nil
}

func (m *Trace) GetInputReferences() [][]byte {
	if m != nil {
		return m.InputReferences
	}
	return nil
}

type Object struct {
	VersionID []byte       `protobuf:"bytes,1,opt,name=versionID,proto3" json:"versionID,omitempty"`
	Value     []byte       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Status    ObjectStatus `protobuf:"varint,3,opt,name=status,proto3,enum=sbac.ObjectStatus" json:"status,omitempty"`
	Labels    []string     `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *Object) GetVersionID() []byte {
	if m != nil {
		return m.VersionID
	}
	return nil
}

func (m *Object) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Object) GetStatus() ObjectStatus {
	if m != nil {
		return m.Status
	}
	return ObjectStatus_ACTIVE
}

func (m *Object) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type AddTransactionRequest struct {
	Tx        *Transaction      `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Evidences map[uint64][]byte `protobuf:"bytes,2,rep,name=evidences" json:"evidences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AddTransactionRequest) Reset()                    { *m = AddTransactionRequest{} }
func (m *AddTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionRequest) ProtoMessage()               {}
func (*AddTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *AddTransactionRequest) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *AddTransactionRequest) GetEvidences() map[uint64][]byte {
	if m != nil {
		return m.Evidences
	}
	return nil
}

type ObjectTraceIDPair struct {
	TraceID []byte    `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Objects []*Object `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
}

func (m *ObjectTraceIDPair) Reset()                    { *m = ObjectTraceIDPair{} }
func (m *ObjectTraceIDPair) String() string            { return proto.CompactTextString(m) }
func (*ObjectTraceIDPair) ProtoMessage()               {}
func (*ObjectTraceIDPair) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *ObjectTraceIDPair) GetTraceID() []byte {
	if m != nil {
		return m.TraceID
	}
	return nil
}

func (m *ObjectTraceIDPair) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

type ObjectList struct {
	List []*Object `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ObjectList) Reset()                    { *m = ObjectList{} }
func (m *ObjectList) String() string            { return proto.CompactTextString(m) }
func (*ObjectList) ProtoMessage()               {}
func (*ObjectList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *ObjectList) GetList() []*Object {
	if m != nil {
		return m.List
	}
	return nil
}

type AddTransactionResponse struct {
	Objects []*Object `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
}

func (m *AddTransactionResponse) Reset()                    { *m = AddTransactionResponse{} }
func (m *AddTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionResponse) ProtoMessage()               {}
func (*AddTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *AddTransactionResponse) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

type StateReport struct {
	HashID          uint32          `protobuf:"varint,1,opt,name=hashID,proto3" json:"hashID,omitempty"`
	CommitDecisions map[uint64]bool `protobuf:"bytes,2,rep,name=commitDecisions" json:"commitDecisions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Phase1Decisions map[uint64]bool `protobuf:"bytes,3,rep,name=phase1Decisions" json:"phase1Decisions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Phase2Decisions map[uint64]bool `protobuf:"bytes,4,rep,name=phase2Decisions" json:"phase2Decisions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	State           string          `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	PendingEvents   int32           `protobuf:"varint,6,opt,name=pendingEvents,proto3" json:"pendingEvents,omitempty"`
}

func (m *StateReport) Reset()                    { *m = StateReport{} }
func (m *StateReport) String() string            { return proto.CompactTextString(m) }
func (*StateReport) ProtoMessage()               {}
func (*StateReport) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *StateReport) GetHashID() uint32 {
	if m != nil {
		return m.HashID
	}
	return 0
}

func (m *StateReport) GetCommitDecisions() map[uint64]bool {
	if m != nil {
		return m.CommitDecisions
	}
	return nil
}

func (m *StateReport) GetPhase1Decisions() map[uint64]bool {
	if m != nil {
		return m.Phase1Decisions
	}
	return nil
}

func (m *StateReport) GetPhase2Decisions() map[uint64]bool {
	if m != nil {
		return m.Phase2Decisions
	}
	return nil
}

func (m *StateReport) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *StateReport) GetPendingEvents() int32 {
	if m != nil {
		return m.PendingEvents
	}
	return 0
}

type StatesReportResponse struct {
	States        []*StateReport `protobuf:"bytes,1,rep,name=states" json:"states,omitempty"`
	EventsInQueue int32          `protobuf:"varint,2,opt,name=eventsInQueue,proto3" json:"eventsInQueue,omitempty"`
}

func (m *StatesReportResponse) Reset()                    { *m = StatesReportResponse{} }
func (m *StatesReportResponse) String() string            { return proto.CompactTextString(m) }
func (*StatesReportResponse) ProtoMessage()               {}
func (*StatesReportResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *StatesReportResponse) GetStates() []*StateReport {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *StatesReportResponse) GetEventsInQueue() int32 {
	if m != nil {
		return m.EventsInQueue
	}
	return 0
}

type QueryObjectRequest struct {
	VersionID []byte `protobuf:"bytes,1,opt,name=versionID,proto3" json:"versionID,omitempty"`
}

func (m *QueryObjectRequest) Reset()                    { *m = QueryObjectRequest{} }
func (m *QueryObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryObjectRequest) ProtoMessage()               {}
func (*QueryObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *QueryObjectRequest) GetVersionID() []byte {
	if m != nil {
		return m.VersionID
	}
	return nil
}

type QueryObjectResponse struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	Error  string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *QueryObjectResponse) Reset()                    { *m = QueryObjectResponse{} }
func (m *QueryObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryObjectResponse) ProtoMessage()               {}
func (*QueryObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *QueryObjectResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *QueryObjectResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CreateObjectRequest struct {
	Object []byte `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *CreateObjectRequest) Reset()                    { *m = CreateObjectRequest{} }
func (m *CreateObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateObjectRequest) ProtoMessage()               {}
func (*CreateObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *CreateObjectRequest) GetObject() []byte {
	if m != nil {
		return m.Object
	}
	return nil
}

type CreateObjectResponse struct {
	ID    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CreateObjectResponse) Reset()                    { *m = CreateObjectResponse{} }
func (m *CreateObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateObjectResponse) ProtoMessage()               {}
func (*CreateObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *CreateObjectResponse) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *CreateObjectResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CreateObjectsRequest struct {
	Objects [][]byte `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
}

func (m *CreateObjectsRequest) Reset()                    { *m = CreateObjectsRequest{} }
func (m *CreateObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateObjectsRequest) ProtoMessage()               {}
func (*CreateObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

func (m *CreateObjectsRequest) GetObjects() [][]byte {
	if m != nil {
		return m.Objects
	}
	return nil
}

type CreateObjectsResponse struct {
	IDs   [][]byte `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Error string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *CreateObjectsResponse) Reset()                    { *m = CreateObjectsResponse{} }
func (m *CreateObjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateObjectsResponse) ProtoMessage()               {}
func (*CreateObjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

func (m *CreateObjectsResponse) GetIDs() [][]byte {
	if m != nil {
		return m.IDs
	}
	return nil
}

func (m *CreateObjectsResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SBACMessage struct {
	Op        SBACOp            `protobuf:"varint,1,opt,name=op,proto3,enum=sbac.SBACOp" json:"op,omitempty"`
	Decision  SBACDecision      `protobuf:"varint,2,opt,name=decision,proto3,enum=sbac.SBACDecision" json:"decision,omitempty"`
	TxID      []byte            `protobuf:"bytes,3,opt,name=txId,proto3" json:"txId,omitempty"`
	Tx        *Transaction      `protobuf:"bytes,4,opt,name=tx" json:"tx,omitempty"`
	Evidences map[uint64][]byte `protobuf:"bytes,5,rep,name=evidences" json:"evidences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Signature []byte            `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	PeerID    uint64            `protobuf:"varint,7,opt,name=peerId,proto3" json:"peerId,omitempty"`
}

func (m *SBACMessage) Reset()                    { *m = SBACMessage{} }
func (m *SBACMessage) String() string            { return proto.CompactTextString(m) }
func (*SBACMessage) ProtoMessage()               {}
func (*SBACMessage) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

func (m *SBACMessage) GetOp() SBACOp {
	if m != nil {
		return m.Op
	}
	return SBACOp_Phase1
}

func (m *SBACMessage) GetDecision() SBACDecision {
	if m != nil {
		return m.Decision
	}
	return SBACDecision_ACCEPT
}

func (m *SBACMessage) GetTxID() []byte {
	if m != nil {
		return m.TxID
	}
	return nil
}

func (m *SBACMessage) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SBACMessage) GetEvidences() map[uint64][]byte {
	if m != nil {
		return m.Evidences
	}
	return nil
}

func (m *SBACMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SBACMessage) GetPeerID() uint64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

type SBACMessageAck struct {
	LastID uint64 `protobuf:"varint,1,opt,name=lastId,proto3" json:"lastId,omitempty"`
}

func (m *SBACMessageAck) Reset()                    { *m = SBACMessageAck{} }
func (m *SBACMessageAck) String() string            { return proto.CompactTextString(m) }
func (*SBACMessageAck) ProtoMessage()               {}
func (*SBACMessageAck) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{17} }

func (m *SBACMessageAck) GetLastID() uint64 {
	if m != nil {
		return m.LastID
	}
	return 0
}

type ConsensusTransaction struct {
	TxID      []byte            `protobuf:"bytes,1,opt,name=txId,proto3" json:"txId,omitempty"`
	Tx        *Transaction      `protobuf:"bytes,2,opt,name=tx" json:"tx,omitempty"`
	Evidences map[uint64][]byte `protobuf:"bytes,3,rep,name=evidences" json:"evidences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Op        ConsensusOp       `protobuf:"varint,4,opt,name=op,proto3,enum=sbac.ConsensusOp" json:"op,omitempty"`
	Initiator uint64            `protobuf:"varint,5,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (m *ConsensusTransaction) Reset()                    { *m = ConsensusTransaction{} }
func (m *ConsensusTransaction) String() string            { return proto.CompactTextString(m) }
func (*ConsensusTransaction) ProtoMessage()               {}
func (*ConsensusTransaction) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{18} }

func (m *ConsensusTransaction) GetTxID() []byte {
	if m != nil {
		return m.TxID
	}
	return nil
}

func (m *ConsensusTransaction) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *ConsensusTransaction) GetEvidences() map[uint64][]byte {
	if m != nil {
		return m.Evidences
	}
	return nil
}

func (m *ConsensusTransaction) GetOp() ConsensusOp {
	if m != nil {
		return m.Op
	}
	return ConsensusOp_Consensus1
}

func (m *ConsensusTransaction) GetInitiator() uint64 {
	if m != nil {
		return m.Initiator
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "sbac.Transaction")
	proto.RegisterType((*Strings)(nil), "sbac.strings")
	proto.RegisterType((*Trace)(nil), "sbac.Trace")
	proto.RegisterType((*Object)(nil), "sbac.Object")
	proto.RegisterType((*AddTransactionRequest)(nil), "sbac.AddTransactionRequest")
	proto.RegisterType((*ObjectTraceIDPair)(nil), "sbac.ObjectTraceIDPair")
	proto.RegisterType((*ObjectList)(nil), "sbac.ObjectList")
	proto.RegisterType((*AddTransactionResponse)(nil), "sbac.AddTransactionResponse")
	proto.RegisterType((*StateReport)(nil), "sbac.StateReport")
	proto.RegisterType((*StatesReportResponse)(nil), "sbac.StatesReportResponse")
	proto.RegisterType((*QueryObjectRequest)(nil), "sbac.QueryObjectRequest")
	proto.RegisterType((*QueryObjectResponse)(nil), "sbac.QueryObjectResponse")
	proto.RegisterType((*CreateObjectRequest)(nil), "sbac.CreateObjectRequest")
	proto.RegisterType((*CreateObjectResponse)(nil), "sbac.CreateObjectResponse")
	proto.RegisterType((*CreateObjectsRequest)(nil), "sbac.CreateObjectsRequest")
	proto.RegisterType((*CreateObjectsResponse)(nil), "sbac.CreateObjectsResponse")
	proto.RegisterType((*SBACMessage)(nil), "sbac.SBACMessage")
	proto.RegisterType((*SBACMessageAck)(nil), "sbac.SBACMessageAck")
	proto.RegisterType((*ConsensusTransaction)(nil), "sbac.ConsensusTransaction")
	proto.RegisterEnum("sbac.Opcode", Opcode_name, Opcode_value)
	proto.RegisterEnum("sbac.ObjectStatus", ObjectStatus_name, ObjectStatus_value)
	proto.RegisterEnum("sbac.SBACOp", SBACOp_name, SBACOp_value)
	proto.RegisterEnum("sbac.SBACDecision", SBACDecision_name, SBACDecision_value)
	proto.RegisterEnum("sbac.ConsensusOp", ConsensusOp_name, ConsensusOp_value)
}

func init() { proto.RegisterFile("sbac/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x8e, 0x28, 0x8a, 0xb2, 0x46, 0xb2, 0x42, 0x6f, 0x6c, 0x83, 0x09, 0x7c, 0x8e, 0x1c, 0x9e,
	0x24, 0x70, 0x74, 0x1a, 0xb9, 0x55, 0x72, 0x51, 0x14, 0x6d, 0x51, 0xfd, 0xa1, 0x61, 0x93, 0x5a,
	0xf6, 0x5a, 0x49, 0xdb, 0xab, 0x80, 0x22, 0x37, 0x32, 0x1b, 0x9b, 0x64, 0xb9, 0x2b, 0xc3, 0x7e,
	0x81, 0xde, 0xf6, 0x11, 0x7a, 0xd1, 0x37, 0xe9, 0x73, 0x14, 0xba, 0xd0, 0x93, 0x14, 0xfb, 0x23,
	0x8a, 0x74, 0x64, 0x17, 0x4d, 0xee, 0x34, 0x33, 0xdf, 0x7c, 0xb3, 0xfb, 0xed, 0xec, 0x2c, 0x05,
	0x26, 0x1d, 0xbb, 0xde, 0x3e, 0xbb, 0x8c, 0x09, 0x6d, 0xc5, 0x49, 0xc4, 0x22, 0xa4, 0x73, 0xcf,
	0xbd, 0x27, 0x93, 0x80, 0x9d, 0x4c, 0xc7, 0x2d, 0x2f, 0x3a, 0xdb, 0x9f, 0x44, 0x93, 0x68, 0x5f,
	0x04, 0xc7, 0xd3, 0xb7, 0xc2, 0x12, 0x86, 0xf8, 0x25, 0x93, 0xec, 0x36, 0x54, 0x47, 0x89, 0x1b,
	0x52, 0xd7, 0x63, 0x41, 0x14, 0xa2, 0xff, 0x81, 0xc1, 0x12, 0xd7, 0x23, 0xd4, 0x2a, 0xec, 0x16,
	0xf7, 0xaa, 0xed, 0x6a, 0x8b, 0x93, 0xb6, 0x46, 0xdc, 0x87, 0x55, 0xc8, 0xfe, 0x0f, 0x94, 0x29,
	0x4b, 0x82, 0x70, 0x42, 0x11, 0x02, 0x9d, 0xb2, 0x44, 0xa2, 0x2b, 0x58, 0xfc, 0xb6, 0x7f, 0xd5,
	0xa1, 0x24, 0x12, 0x50, 0x0b, 0xc0, 0x8b, 0x42, 0x9e, 0xc5, 0x9c, 0xbe, 0x55, 0xd8, 0x2d, 0xec,
	0x55, 0xba, 0xf5, 0xf9, 0xac, 0x01, 0xbd, 0xd4, 0x8b, 0x33, 0x08, 0xb4, 0x03, 0x95, 0x38, 0x89,
	0x3c, 0xe2, 0x4f, 0x13, 0x62, 0x69, 0x1c, 0x8e, 0x97, 0x0e, 0x34, 0x84, 0xad, 0x20, 0x8c, 0xa7,
	0x6c, 0x38, 0xfe, 0x99, 0x78, 0xec, 0x35, 0x49, 0x68, 0x10, 0x85, 0x4e, 0x9f, 0x5a, 0xc5, 0xdd,
	0xe2, 0x5e, 0xad, 0x7b, 0x77, 0x3e, 0x6b, 0x6c, 0x39, 0xab, 0x00, 0x78, 0x75, 0x1e, 0xfa, 0x11,
	0x2c, 0x11, 0xc0, 0xe4, 0x2d, 0x49, 0x48, 0xe8, 0x91, 0x0c, 0xa7, 0x2e, 0x38, 0x77, 0xe6, 0xb3,
	0x86, 0xe5, 0x5c, 0x83, 0xc1, 0xd7, 0x66, 0xa3, 0x07, 0xb0, 0x1e, 0x4d, 0x59, 0x5a, 0x93, 0x5a,
	0x25, 0x4e, 0x87, 0xf3, 0x4e, 0xf4, 0x5f, 0x80, 0xd8, 0x4d, 0xdc, 0x33, 0xc2, 0x48, 0x42, 0x2d,
	0x43, 0x40, 0x32, 0x1e, 0x64, 0x41, 0x39, 0x21, 0x6c, 0x9a, 0x84, 0xd4, 0x2a, 0x8b, 0xe0, 0xc2,
	0x44, 0x0f, 0xc1, 0x38, 0x75, 0xc7, 0xe4, 0x94, 0x5a, 0x6b, 0xe2, 0x98, 0xd6, 0xe5, 0x31, 0xa9,
	0x53, 0xc1, 0x2a, 0x88, 0xf6, 0xa1, 0xe6, 0x93, 0x98, 0x84, 0x3e, 0x09, 0xbd, 0x80, 0x50, 0xab,
	0xf2, 0xfe, 0x99, 0xe6, 0x00, 0xc8, 0x86, 0x5a, 0x46, 0x2a, 0x6a, 0x81, 0x28, 0x9b, 0xf3, 0xa1,
	0x3d, 0xb8, 0x9d, 0xdf, 0x37, 0xb5, 0xaa, 0x02, 0x76, 0xd5, 0x6d, 0xff, 0x56, 0x00, 0x43, 0x66,
	0xa1, 0xff, 0x43, 0xe5, 0x7c, 0x21, 0x8f, 0x68, 0x84, 0x5a, 0x77, 0x7d, 0x3e, 0x6b, 0x54, 0x52,
	0xcd, 0xf0, 0x32, 0x8e, 0x36, 0xa1, 0x74, 0xee, 0x9e, 0x4e, 0x65, 0x0b, 0xd4, 0xb0, 0x34, 0x50,
	0x13, 0x0c, 0xca, 0x5c, 0x36, 0xe5, 0xe7, 0x5d, 0xd8, 0xab, 0xb7, 0x91, 0xdc, 0x86, 0x2c, 0x70,
	0x2c, 0x22, 0x58, 0x21, 0xd0, 0x76, 0xaa, 0x8f, 0x2e, 0x1a, 0x53, 0x59, 0xf6, 0x9f, 0x05, 0xd8,
	0xea, 0xf8, 0x7e, 0xa6, 0xe3, 0x31, 0xf9, 0x65, 0x4a, 0x28, 0x43, 0xf7, 0x41, 0x63, 0x17, 0x62,
	0x65, 0xd5, 0xf6, 0x46, 0x2a, 0x50, 0x8a, 0xd2, 0xd8, 0x05, 0x7a, 0x0e, 0x15, 0x72, 0x1e, 0xf8,
	0x72, 0xcb, 0x9a, 0x90, 0xb2, 0x29, 0x91, 0x2b, 0x29, 0x5b, 0x83, 0x05, 0x78, 0x10, 0xb2, 0xe4,
	0x12, 0x2f, 0x93, 0xef, 0x7d, 0x09, 0xf5, 0x7c, 0x10, 0x99, 0x50, 0x7c, 0x47, 0x2e, 0x45, 0x7d,
	0x1d, 0xf3, 0x9f, 0xab, 0x45, 0xf8, 0x42, 0xfb, 0xbc, 0x60, 0x8f, 0x61, 0x43, 0x6e, 0x5a, 0x9c,
	0xa0, 0xd3, 0x3f, 0x74, 0x83, 0x04, 0x3d, 0x84, 0x32, 0x93, 0xa6, 0x92, 0xb7, 0x3a, 0x9f, 0x35,
	0xca, 0x0a, 0x81, 0x17, 0x31, 0xf4, 0x08, 0xca, 0x91, 0x3a, 0x5b, 0xb9, 0x83, 0x5a, 0x56, 0x45,
	0xbc, 0x08, 0xda, 0x2d, 0x00, 0xe9, 0x7a, 0x19, 0x50, 0x86, 0x76, 0x41, 0x3f, 0x0d, 0x28, 0x53,
	0x33, 0x21, 0x9f, 0x22, 0x22, 0xf6, 0x37, 0xb0, 0x7d, 0x55, 0x04, 0x1a, 0x47, 0x21, 0x25, 0xd9,
	0x8a, 0x85, 0x9b, 0x2a, 0xfe, 0xa1, 0x43, 0x95, 0x9f, 0x22, 0xc1, 0x24, 0x8e, 0x12, 0xc6, 0x8f,
	0xf0, 0xc4, 0xa5, 0x27, 0x6a, 0x3f, 0xeb, 0x58, 0x59, 0xe8, 0x10, 0x6e, 0x7b, 0xd1, 0xd9, 0x59,
	0xc0, 0xfa, 0xc4, 0x0b, 0x78, 0xc3, 0x2c, 0x76, 0xf2, 0x48, 0xf2, 0x66, 0x38, 0x5a, 0xbd, 0x3c,
	0x50, 0x9e, 0xc3, 0xd5, 0x74, 0xce, 0x18, 0x9f, 0xb8, 0x94, 0x7c, 0xb6, 0x64, 0x2c, 0x5e, 0xc7,
	0x78, 0x98, 0x07, 0x2a, 0xc6, 0x2b, 0xe9, 0x29, 0x63, 0x7b, 0xc9, 0xa8, 0xdf, 0xc8, 0xd8, 0x5e,
	0xc9, 0xb8, 0xf4, 0xf2, 0x6e, 0xe0, 0xad, 0x4d, 0xac, 0x92, 0x98, 0x8a, 0xd2, 0xe0, 0x63, 0x86,
	0x5f, 0xde, 0x20, 0x9c, 0x0c, 0xce, 0x49, 0xc8, 0xf8, 0x0c, 0x29, 0xec, 0x95, 0x70, 0xde, 0x79,
	0xaf, 0x0b, 0x9b, 0xab, 0x84, 0xf8, 0xa7, 0x9e, 0x5b, 0xcb, 0xf4, 0x1c, 0xe7, 0x58, 0xb5, 0xf5,
	0x0f, 0xe2, 0x68, 0x7f, 0x38, 0x87, 0x3d, 0x81, 0x4d, 0x21, 0x1e, 0x95, 0xea, 0xa5, 0x5d, 0xf6,
	0x58, 0x0e, 0x87, 0xf4, 0xdd, 0xda, 0x78, 0x4f, 0x68, 0xac, 0x00, 0x5c, 0x34, 0x22, 0x84, 0x71,
	0xc2, 0xa3, 0x29, 0x51, 0x45, 0x4a, 0x38, 0xef, 0xb4, 0x3b, 0x80, 0x8e, 0xa6, 0x24, 0xb9, 0x54,
	0x6d, 0xaa, 0xa6, 0xc4, 0xbf, 0x19, 0x63, 0xf6, 0x11, 0xdc, 0xc9, 0x51, 0xa8, 0xa5, 0x3e, 0x00,
	0x43, 0xf6, 0xbc, 0x9a, 0x36, 0xf9, 0xfb, 0xa0, 0x62, 0x5c, 0x02, 0x92, 0x24, 0x51, 0xa2, 0x9e,
	0x41, 0x69, 0xd8, 0x4f, 0xe0, 0x4e, 0x2f, 0x21, 0x2e, 0x23, 0xf9, 0x65, 0x6d, 0xe7, 0x28, 0x6b,
	0x0b, 0x12, 0xbb, 0x0f, 0x9b, 0x79, 0xb8, 0x5a, 0xc2, 0x36, 0x68, 0x81, 0xaf, 0xd6, 0x6f, 0xcc,
	0x67, 0x0d, 0xcd, 0xe9, 0x63, 0x2d, 0xf0, 0xaf, 0x29, 0xfa, 0x69, 0x9e, 0x85, 0x2e, 0xaa, 0x5a,
	0xf9, 0x9b, 0x5d, 0x5b, 0xde, 0xe5, 0xe7, 0xb0, 0x75, 0x25, 0x43, 0x15, 0xbe, 0x0b, 0xc5, 0xc0,
	0x57, 0xf0, 0x6e, 0x79, 0x3e, 0x6b, 0x14, 0xf9, 0x3b, 0xca, 0x7d, 0xd7, 0xd4, 0xfe, 0x4b, 0x83,
	0xea, 0x71, 0xb7, 0xd3, 0xfb, 0x9e, 0x50, 0xea, 0x4e, 0x08, 0xda, 0x01, 0x2d, 0x8a, 0xc5, 0xca,
	0xeb, 0x0b, 0xe1, 0x78, 0x78, 0x18, 0x63, 0x2d, 0x8a, 0x51, 0x0b, 0xd6, 0x7c, 0xd5, 0x5b, 0x82,
	0x26, 0x7d, 0x24, 0x38, 0x66, 0xd1, 0x75, 0x38, 0xc5, 0xa0, 0x1d, 0xd0, 0xd9, 0x85, 0xe3, 0x8b,
	0x07, 0xa5, 0xd6, 0x5d, 0x9b, 0xcf, 0x1a, 0xfa, 0xe8, 0xc2, 0xe9, 0x63, 0xe1, 0x55, 0x4f, 0x82,
	0x7e, 0xd3, 0x93, 0xf0, 0x75, 0xf6, 0x49, 0x28, 0x89, 0xce, 0xdb, 0x5d, 0x56, 0x54, 0x8b, 0xbe,
	0xfe, 0x21, 0xe0, 0x1f, 0x3c, 0x34, 0x98, 0x84, 0x2e, 0xe3, 0x1f, 0x3c, 0x86, 0x38, 0xbb, 0xa5,
	0x03, 0xd9, 0x60, 0xc4, 0x84, 0x24, 0x8e, 0x6f, 0x95, 0xf9, 0xdd, 0xe8, 0xc2, 0x7c, 0xd6, 0x30,
	0x0e, 0xb9, 0xa7, 0x8f, 0x55, 0xe4, 0x23, 0x9f, 0x92, 0x67, 0x50, 0xcf, 0x2c, 0xb4, 0xe3, 0xbd,
	0xe3, 0x35, 0x4f, 0x5d, 0xca, 0x1c, 0xd9, 0x1e, 0xaa, 0xe6, 0x4b, 0xee, 0xe9, 0x63, 0x15, 0xb1,
	0x7f, 0xd7, 0xf8, 0x44, 0x09, 0x29, 0x09, 0xe9, 0x94, 0x66, 0xbf, 0x1e, 0x17, 0x7a, 0x16, 0x6e,
	0xd0, 0x53, 0xbb, 0x49, 0xcf, 0x6f, 0xb3, 0x7a, 0xca, 0x21, 0xfc, 0x58, 0x22, 0x57, 0xd5, 0xbb,
	0x41, 0xd8, 0xfb, 0xa2, 0x4f, 0x74, 0xd1, 0x03, 0x1b, 0x57, 0x18, 0x54, 0xb3, 0xec, 0x40, 0x25,
	0x08, 0x03, 0x16, 0xb8, 0x2c, 0x4a, 0xc4, 0x58, 0xd5, 0xf1, 0xd2, 0xf1, 0x71, 0xba, 0x36, 0x2f,
	0xc1, 0x18, 0xc6, 0x5e, 0xe4, 0x13, 0x54, 0x85, 0xf2, 0xab, 0x83, 0x17, 0x07, 0xc3, 0x1f, 0x0e,
	0xcc, 0x5b, 0xe8, 0x0e, 0xdc, 0xee, 0xf4, 0xfb, 0x6f, 0x46, 0xb8, 0x73, 0x70, 0xdc, 0xe9, 0x8d,
	0x9c, 0xe1, 0x81, 0x59, 0x40, 0x26, 0xd4, 0x8e, 0x5e, 0x0d, 0xf0, 0x4f, 0x6f, 0x86, 0xdd, 0xef,
	0x06, 0xbd, 0x91, 0xa9, 0xa1, 0x0d, 0x58, 0xef, 0xe1, 0x41, 0x67, 0x34, 0x58, 0xb8, 0x8a, 0x08,
	0xc0, 0x38, 0x1e, 0x75, 0x46, 0x83, 0x63, 0x53, 0x47, 0x6b, 0xa0, 0xf3, 0x43, 0x33, 0x4b, 0x08,
	0x41, 0x3d, 0x07, 0x3c, 0x36, 0x8d, 0xe6, 0x33, 0xa8, 0x65, 0x3f, 0x89, 0x78, 0x26, 0x2f, 0xf5,
	0x7a, 0x60, 0xde, 0x42, 0x35, 0x58, 0x73, 0x0e, 0x94, 0x55, 0xe0, 0x91, 0x97, 0xc3, 0xde, 0x8b,
	0x41, 0xdf, 0xd4, 0x9a, 0x9f, 0x80, 0x21, 0xef, 0x11, 0xf7, 0xca, 0x49, 0x6f, 0xde, 0x4a, 0x7f,
	0xb7, 0x25, 0x5a, 0xbe, 0x22, 0xa6, 0xd6, 0x7c, 0x04, 0xb5, 0xec, 0x8d, 0x92, 0x35, 0x7a, 0x83,
	0xc3, 0x91, 0xcc, 0xc1, 0x03, 0xb1, 0xea, 0x42, 0xf3, 0x2b, 0xa8, 0x66, 0x54, 0x47, 0x75, 0x80,
	0xd4, 0xe4, 0xf4, 0x59, 0x9b, 0x97, 0xc8, 0xda, 0x4f, 0x4d, 0x6d, 0x6c, 0x88, 0xbf, 0x28, 0x4f,
	0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x18, 0x3f, 0x41, 0x62, 0xeb, 0x0c, 0x00, 0x00,
}
