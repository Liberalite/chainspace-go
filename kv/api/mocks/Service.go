// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "chainspace.io/prototype/kv/api"
import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetByLabel provides a mock function with given fields: label
func (_m *Service) GetByLabel(label string) (api.LabelObject, int, error) {
	ret := _m.Called(label)

	var r0 api.LabelObject
	if rf, ok := ret.Get(0).(func(string) api.LabelObject); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(api.LabelObject)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(label)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByPrefix provides a mock function with given fields: prefix
func (_m *Service) GetByPrefix(prefix string) ([]api.LabelObject, int, error) {
	ret := _m.Called(prefix)

	var r0 []api.LabelObject
	if rf, ok := ret.Get(0).(func(string) []api.LabelObject); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.LabelObject)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(prefix)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVersionID provides a mock function with given fields: label
func (_m *Service) GetVersionID(label string) (string, int, error) {
	ret := _m.Called(label)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(label)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVersionIDByPrefix provides a mock function with given fields: prefixz
func (_m *Service) GetVersionIDByPrefix(prefixz string) ([]api.LabelVersionID, int, error) {
	ret := _m.Called(prefixz)

	var r0 []api.LabelVersionID
	if rf, ok := ret.Get(0).(func(string) []api.LabelVersionID); ok {
		r0 = rf(prefixz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.LabelVersionID)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(prefixz)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(prefixz)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
