// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package transactor

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Opcode int32

const (
	Opcode_UNKNOWN         Opcode = 0
	Opcode_ADD_TRANSACTION Opcode = 1
	Opcode_QUERY_OBJECT    Opcode = 2
	Opcode_CREATE_OBJECT   Opcode = 3
	Opcode_DELETE_OBJECT   Opcode = 4
)

var Opcode_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADD_TRANSACTION",
	2: "QUERY_OBJECT",
	3: "CREATE_OBJECT",
	4: "DELETE_OBJECT",
}
var Opcode_value = map[string]int32{
	"UNKNOWN":         0,
	"ADD_TRANSACTION": 1,
	"QUERY_OBJECT":    2,
	"CREATE_OBJECT":   3,
	"DELETE_OBJECT":   4,
}

func (x Opcode) String() string {
	return proto.EnumName(Opcode_name, int32(x))
}
func (Opcode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type ObjectStatus int32

const (
	ObjectStatus_ACTIVE   ObjectStatus = 0
	ObjectStatus_INACTIVE ObjectStatus = 1
	ObjectStatus_LOCKED   ObjectStatus = 2
)

var ObjectStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
	2: "LOCKED",
}
var ObjectStatus_value = map[string]int32{
	"ACTIVE":   0,
	"INACTIVE": 1,
	"LOCKED":   2,
}

func (x ObjectStatus) String() string {
	return proto.EnumName(ObjectStatus_name, int32(x))
}
func (ObjectStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type SBACStep int32

const (
	SBACStep_LOCAL_PREPARED SBACStep = 0
	SBACStep_SOME_PREPARED  SBACStep = 1
	SBACStep_ALL_PREPARED   SBACStep = 2
)

var SBACStep_name = map[int32]string{
	0: "LOCAL_PREPARED",
	1: "SOME_PREPARED",
	2: "ALL_PREPARED",
}
var SBACStep_value = map[string]int32{
	"LOCAL_PREPARED": 0,
	"SOME_PREPARED":  1,
	"ALL_PREPARED":   2,
}

func (x SBACStep) String() string {
	return proto.EnumName(SBACStep_name, int32(x))
}
func (SBACStep) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type StepStatus int32

const (
	StepStatus_ABORT  StepStatus = 0
	StepStatus_COMMIT StepStatus = 1
)

var StepStatus_name = map[int32]string{
	0: "ABORT",
	1: "COMMIT",
}
var StepStatus_value = map[string]int32{
	"ABORT":  0,
	"COMMIT": 1,
}

func (x StepStatus) String() string {
	return proto.EnumName(StepStatus_name, int32(x))
}
func (StepStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type Transaction struct {
	Traces []*Trace `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Transaction) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type Trace struct {
	ContractID          string   `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	Procedure           string   `protobuf:"bytes,2,opt,name=procedure,proto3" json:"procedure,omitempty"`
	InputObjectsKeys    [][]byte `protobuf:"bytes,3,rep,name=inputObjectsKeys" json:"inputObjectsKeys,omitempty"`
	InputReferencesKeys [][]byte `protobuf:"bytes,4,rep,name=inputReferencesKeys" json:"inputReferencesKeys,omitempty"`
	OutputObjects       [][]byte `protobuf:"bytes,5,rep,name=outputObjects" json:"outputObjects,omitempty"`
	Parameters          [][]byte `protobuf:"bytes,6,rep,name=parameters" json:"parameters,omitempty"`
	Returns             [][]byte `protobuf:"bytes,7,rep,name=returns" json:"returns,omitempty"`
	Dependencies        []*Trace `protobuf:"bytes,8,rep,name=dependencies" json:"dependencies,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Trace) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *Trace) GetProcedure() string {
	if m != nil {
		return m.Procedure
	}
	return ""
}

func (m *Trace) GetInputObjectsKeys() [][]byte {
	if m != nil {
		return m.InputObjectsKeys
	}
	return nil
}

func (m *Trace) GetInputReferencesKeys() [][]byte {
	if m != nil {
		return m.InputReferencesKeys
	}
	return nil
}

func (m *Trace) GetOutputObjects() [][]byte {
	if m != nil {
		return m.OutputObjects
	}
	return nil
}

func (m *Trace) GetParameters() [][]byte {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Trace) GetReturns() [][]byte {
	if m != nil {
		return m.Returns
	}
	return nil
}

func (m *Trace) GetDependencies() []*Trace {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

type Object struct {
	Value  []byte       `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Key    []byte       `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Status ObjectStatus `protobuf:"varint,3,opt,name=status,proto3,enum=transactor.ObjectStatus" json:"status,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *Object) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Object) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Object) GetStatus() ObjectStatus {
	if m != nil {
		return m.Status
	}
	return ObjectStatus_ACTIVE
}

type AddTransactionRequest struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *AddTransactionRequest) Reset()                    { *m = AddTransactionRequest{} }
func (m *AddTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionRequest) ProtoMessage()               {}
func (*AddTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *AddTransactionRequest) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type ObjectTraceIDPair struct {
	TraceID []byte    `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Objects []*Object `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
}

func (m *ObjectTraceIDPair) Reset()                    { *m = ObjectTraceIDPair{} }
func (m *ObjectTraceIDPair) String() string            { return proto.CompactTextString(m) }
func (*ObjectTraceIDPair) ProtoMessage()               {}
func (*ObjectTraceIDPair) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *ObjectTraceIDPair) GetTraceID() []byte {
	if m != nil {
		return m.TraceID
	}
	return nil
}

func (m *ObjectTraceIDPair) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

type AddTransactionResponse struct {
	Pairs []*ObjectTraceIDPair `protobuf:"bytes,1,rep,name=pairs" json:"pairs,omitempty"`
}

func (m *AddTransactionResponse) Reset()                    { *m = AddTransactionResponse{} }
func (m *AddTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionResponse) ProtoMessage()               {}
func (*AddTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *AddTransactionResponse) GetPairs() []*ObjectTraceIDPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type QueryObjectRequest struct {
	ObjectKey []byte `protobuf:"bytes,1,opt,name=objectKey,proto3" json:"objectKey,omitempty"`
}

func (m *QueryObjectRequest) Reset()                    { *m = QueryObjectRequest{} }
func (m *QueryObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryObjectRequest) ProtoMessage()               {}
func (*QueryObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *QueryObjectRequest) GetObjectKey() []byte {
	if m != nil {
		return m.ObjectKey
	}
	return nil
}

type QueryObjectResponse struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *QueryObjectResponse) Reset()                    { *m = QueryObjectResponse{} }
func (m *QueryObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryObjectResponse) ProtoMessage()               {}
func (*QueryObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *QueryObjectResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type DeleteObjectRequest struct {
	ObjectKey []byte `protobuf:"bytes,1,opt,name=objectKey,proto3" json:"objectKey,omitempty"`
}

func (m *DeleteObjectRequest) Reset()                    { *m = DeleteObjectRequest{} }
func (m *DeleteObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectRequest) ProtoMessage()               {}
func (*DeleteObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *DeleteObjectRequest) GetObjectKey() []byte {
	if m != nil {
		return m.ObjectKey
	}
	return nil
}

type DeleteObjectResponse struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *DeleteObjectResponse) Reset()                    { *m = DeleteObjectResponse{} }
func (m *DeleteObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectResponse) ProtoMessage()               {}
func (*DeleteObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *DeleteObjectResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type SBACStepRequest struct {
	Step   SBACStep     `protobuf:"varint,1,opt,name=step,proto3,enum=transactor.SBACStep" json:"step,omitempty"`
	Status StepStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=transactor.StepStatus" json:"status,omitempty"`
	Tx     *Transaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
}

func (m *SBACStepRequest) Reset()                    { *m = SBACStepRequest{} }
func (m *SBACStepRequest) String() string            { return proto.CompactTextString(m) }
func (*SBACStepRequest) ProtoMessage()               {}
func (*SBACStepRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *SBACStepRequest) GetStep() SBACStep {
	if m != nil {
		return m.Step
	}
	return SBACStep_LOCAL_PREPARED
}

func (m *SBACStepRequest) GetStatus() StepStatus {
	if m != nil {
		return m.Status
	}
	return StepStatus_ABORT
}

func (m *SBACStepRequest) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type NewObjectRequest struct {
	Object []byte `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *NewObjectRequest) Reset()                    { *m = NewObjectRequest{} }
func (m *NewObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*NewObjectRequest) ProtoMessage()               {}
func (*NewObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *NewObjectRequest) GetObject() []byte {
	if m != nil {
		return m.Object
	}
	return nil
}

type NewObjectResponse struct {
	ID []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *NewObjectResponse) Reset()                    { *m = NewObjectResponse{} }
func (m *NewObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*NewObjectResponse) ProtoMessage()               {}
func (*NewObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *NewObjectResponse) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "transactor.Transaction")
	proto.RegisterType((*Trace)(nil), "transactor.Trace")
	proto.RegisterType((*Object)(nil), "transactor.Object")
	proto.RegisterType((*AddTransactionRequest)(nil), "transactor.AddTransactionRequest")
	proto.RegisterType((*ObjectTraceIDPair)(nil), "transactor.ObjectTraceIDPair")
	proto.RegisterType((*AddTransactionResponse)(nil), "transactor.AddTransactionResponse")
	proto.RegisterType((*QueryObjectRequest)(nil), "transactor.QueryObjectRequest")
	proto.RegisterType((*QueryObjectResponse)(nil), "transactor.QueryObjectResponse")
	proto.RegisterType((*DeleteObjectRequest)(nil), "transactor.DeleteObjectRequest")
	proto.RegisterType((*DeleteObjectResponse)(nil), "transactor.DeleteObjectResponse")
	proto.RegisterType((*SBACStepRequest)(nil), "transactor.SBACStepRequest")
	proto.RegisterType((*NewObjectRequest)(nil), "transactor.NewObjectRequest")
	proto.RegisterType((*NewObjectResponse)(nil), "transactor.NewObjectResponse")
	proto.RegisterEnum("transactor.Opcode", Opcode_name, Opcode_value)
	proto.RegisterEnum("transactor.ObjectStatus", ObjectStatus_name, ObjectStatus_value)
	proto.RegisterEnum("transactor.SBACStep", SBACStep_name, SBACStep_value)
	proto.RegisterEnum("transactor.StepStatus", StepStatus_name, StepStatus_value)
}

func init() { proto.RegisterFile("service/transactor/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x72, 0xdb, 0x54,
	0x10, 0xc6, 0x23, 0x39, 0x96, 0x93, 0xb5, 0x9a, 0x2a, 0xc7, 0xc1, 0x68, 0x98, 0xd2, 0x64, 0x04,
	0x0c, 0xc6, 0x80, 0xdd, 0x71, 0x60, 0x06, 0x2e, 0x65, 0x49, 0x17, 0xc6, 0x7f, 0x94, 0x1e, 0xab,
	0x30, 0x5c, 0x65, 0x64, 0x69, 0x9b, 0x0a, 0x5a, 0x49, 0x48, 0x47, 0xa5, 0x7e, 0x0f, 0x9e, 0x8a,
	0x87, 0xc8, 0x45, 0x9e, 0x84, 0xd1, 0x91, 0x6c, 0x49, 0x4d, 0x60, 0x86, 0xde, 0x79, 0xbf, 0xfd,
	0xed, 0xf9, 0xce, 0xee, 0x59, 0x19, 0x9e, 0xa6, 0x98, 0xbc, 0x0d, 0x3c, 0x1c, 0xb3, 0xc4, 0x0d,
	0x53, 0xd7, 0x63, 0x51, 0x32, 0x66, 0xdb, 0x18, 0xd3, 0x51, 0x9c, 0x44, 0x2c, 0x22, 0x50, 0xe9,
	0x9f, 0x7c, 0x7b, 0x13, 0xb0, 0x57, 0xd9, 0x66, 0xe4, 0x45, 0x6f, 0xc6, 0x37, 0xd1, 0x4d, 0x34,
	0xe6, 0xc8, 0x26, 0x7b, 0xc9, 0x23, 0x1e, 0xf0, 0x5f, 0x45, 0xa9, 0xf6, 0x03, 0x74, 0x9d, 0xb2,
	0x38, 0x88, 0x42, 0xf2, 0x15, 0x48, 0x2c, 0x71, 0x3d, 0x4c, 0x55, 0xe1, 0xa2, 0x35, 0xe8, 0x4e,
	0x4e, 0x47, 0xd5, 0xd1, 0x23, 0x27, 0xcf, 0xd0, 0x12, 0xd0, 0xfe, 0x16, 0xa1, 0xcd, 0x15, 0x32,
	0x02, 0xf0, 0xa2, 0x30, 0x97, 0xd9, 0xcc, 0x54, 0x85, 0x0b, 0x61, 0x70, 0x3c, 0x3d, 0xb9, 0xbb,
	0x3d, 0x07, 0x63, 0xaf, 0xd2, 0x1a, 0x41, 0x9e, 0xc0, 0x71, 0x9c, 0x44, 0x1e, 0xfa, 0x59, 0x82,
	0xaa, 0x98, 0xe3, 0xb4, 0x12, 0xc8, 0x10, 0x94, 0x20, 0x8c, 0x33, 0x66, 0x6f, 0x7e, 0x43, 0x8f,
	0xa5, 0x73, 0xdc, 0xa6, 0x6a, 0xeb, 0xa2, 0x35, 0x90, 0xe9, 0x3d, 0x9d, 0x3c, 0x83, 0x1e, 0xd7,
	0x28, 0xbe, 0xc4, 0x04, 0x43, 0x0f, 0x0b, 0xfc, 0x90, 0xe3, 0x0f, 0xa5, 0xc8, 0xe7, 0xf0, 0x28,
	0xca, 0x58, 0x75, 0x8c, 0xda, 0xe6, 0x6c, 0x53, 0x24, 0x4f, 0x01, 0x62, 0x37, 0x71, 0xdf, 0x20,
	0xc3, 0x24, 0x55, 0x25, 0x8e, 0xd4, 0x14, 0xa2, 0x42, 0x27, 0x41, 0x96, 0x25, 0x61, 0xaa, 0x76,
	0x78, 0x72, 0x17, 0x92, 0xef, 0x41, 0xf6, 0x31, 0xc6, 0xd0, 0xc7, 0xd0, 0x0b, 0x30, 0x55, 0x8f,
	0xfe, 0x6d, 0x8c, 0x0d, 0x4c, 0xdb, 0x80, 0x54, 0x78, 0x93, 0x33, 0x68, 0xbf, 0x75, 0x5f, 0x67,
	0xc8, 0xe7, 0x28, 0xd3, 0x22, 0x20, 0x0a, 0xb4, 0x7e, 0xc7, 0x2d, 0x1f, 0x96, 0x4c, 0xf3, 0x9f,
	0xe4, 0x19, 0x48, 0x29, 0x73, 0x59, 0x96, 0x0f, 0x47, 0x18, 0x9c, 0x4c, 0xd4, 0xba, 0x45, 0x71,
	0xd6, 0x9a, 0xe7, 0x69, 0xc9, 0x69, 0x14, 0x3e, 0xd2, 0x7d, 0xbf, 0xf6, 0xda, 0x14, 0xff, 0xc8,
	0x30, 0x65, 0xe4, 0x47, 0xe8, 0xb2, 0x4a, 0xe5, 0xc6, 0xdd, 0xc9, 0xc7, 0xef, 0x5d, 0x79, 0x5f,
	0x54, 0x67, 0xb5, 0x57, 0x70, 0x5a, 0x78, 0xf1, 0xa6, 0x66, 0xe6, 0x95, 0x1b, 0x24, 0xe4, 0x0b,
	0xe8, 0xb0, 0x22, 0x2c, 0x9a, 0x98, 0x76, 0xef, 0x6e, 0xcf, 0x3b, 0x25, 0x41, 0x77, 0x39, 0xf2,
	0x0d, 0x74, 0xa2, 0xf2, 0x11, 0x44, 0x3e, 0x25, 0x72, 0xbf, 0x05, 0xba, 0x43, 0xb4, 0x25, 0xf4,
	0xdf, 0xbf, 0x7d, 0x1a, 0x47, 0x61, 0x8a, 0xe4, 0x12, 0xda, 0xb1, 0x1b, 0x24, 0xbb, 0x95, 0xfd,
	0xf4, 0xfe, 0x29, 0xb5, 0xcb, 0xd1, 0x82, 0xd5, 0x26, 0x40, 0x9e, 0x67, 0x98, 0x6c, 0x4b, 0x9b,
	0x72, 0x12, 0x4f, 0xe0, 0xb8, 0xf0, 0x9b, 0xe3, 0xb6, 0x7c, 0x80, 0x4a, 0xd0, 0x74, 0xe8, 0x35,
	0x6a, 0x4a, 0xff, 0x21, 0x48, 0x05, 0x53, 0x4e, 0xee, 0xa1, 0x36, 0x4a, 0x42, 0xbb, 0x84, 0x9e,
	0x89, 0xaf, 0x91, 0xe1, 0xff, 0xf1, 0x9d, 0xc2, 0x59, 0xb3, 0xe8, 0x03, 0x8c, 0xff, 0x12, 0xe0,
	0xf1, 0x7a, 0xaa, 0x1b, 0x6b, 0x86, 0xf1, 0xce, 0x75, 0x00, 0x87, 0x29, 0xc3, 0x98, 0x57, 0x9f,
	0x4c, 0xce, 0xea, 0xd5, 0x7b, 0x94, 0x13, 0x64, 0xb4, 0x5f, 0x36, 0x91, 0xb3, 0xfd, 0x06, 0xcb,
	0x30, 0x6e, 0xae, 0x1a, 0xf9, 0x12, 0x44, 0xf6, 0x8e, 0x2f, 0xe6, 0x7f, 0x2c, 0x92, 0xc8, 0xde,
	0x69, 0x43, 0x50, 0x56, 0xf8, 0x67, 0x73, 0x18, 0xfd, 0x46, 0x5b, 0xf2, 0xbe, 0x85, 0xaf, 0xe1,
	0xb4, 0xc6, 0x96, 0x33, 0xe8, 0x83, 0x18, 0xf8, 0xe5, 0x9a, 0x49, 0x77, 0xb7, 0xe7, 0xe2, 0xcc,
	0xa4, 0x62, 0xe0, 0x0f, 0xf3, 0x0f, 0x2a, 0xf6, 0x22, 0x1f, 0x49, 0x17, 0x3a, 0x2f, 0x56, 0xf3,
	0x95, 0xfd, 0xcb, 0x4a, 0x39, 0x20, 0x3d, 0x78, 0xac, 0x9b, 0xe6, 0xb5, 0x43, 0xf5, 0xd5, 0x5a,
	0x37, 0x9c, 0x99, 0xbd, 0x52, 0x04, 0xa2, 0x80, 0xfc, 0xfc, 0x85, 0x45, 0x7f, 0xbd, 0xb6, 0xa7,
	0x3f, 0x59, 0x86, 0xa3, 0x88, 0xe4, 0x14, 0x1e, 0x19, 0xd4, 0xd2, 0x1d, 0x6b, 0x27, 0xb5, 0x72,
	0xc9, 0xb4, 0x16, 0x56, 0x25, 0x1d, 0x0e, 0xbf, 0x03, 0xb9, 0xfe, 0xa1, 0x11, 0x00, 0x29, 0x3f,
	0xf3, 0x67, 0x4b, 0x39, 0x20, 0x32, 0x1c, 0xcd, 0x56, 0x65, 0x24, 0xe4, 0x99, 0x85, 0x6d, 0xcc,
	0x2d, 0x53, 0x11, 0x87, 0x06, 0x1c, 0xed, 0xa6, 0x4b, 0x08, 0x9c, 0x2c, 0x6c, 0x43, 0x5f, 0x5c,
	0x5f, 0x51, 0xeb, 0x4a, 0xa7, 0x96, 0xa9, 0x1c, 0xe4, 0x46, 0x6b, 0x7b, 0x69, 0x55, 0x12, 0xbf,
	0xa0, 0xbe, 0xa8, 0x41, 0xe2, 0xf0, 0x33, 0x80, 0x6a, 0xec, 0xe4, 0x18, 0xda, 0xfa, 0xd4, 0xa6,
	0x8e, 0x72, 0x90, 0x3b, 0x19, 0xf6, 0x72, 0x39, 0x73, 0x14, 0x61, 0x23, 0xf1, 0xbf, 0xf8, 0xcb,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x15, 0x9e, 0x90, 0x3f, 0x06, 0x00, 0x00,
}
