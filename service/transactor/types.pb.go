// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package transactor

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Opcode int32

const (
	Opcode_UNKNOWN           Opcode = 0
	Opcode_CHECK_TRANSACTION Opcode = 1
	Opcode_ADD_TRANSACTION   Opcode = 2
	Opcode_QUERY_OBJECT      Opcode = 3
	Opcode_CREATE_OBJECT     Opcode = 4
	Opcode_DELETE_OBJECT     Opcode = 5
	Opcode_SBAC              Opcode = 6
)

var Opcode_name = map[int32]string{
	0: "UNKNOWN",
	1: "CHECK_TRANSACTION",
	2: "ADD_TRANSACTION",
	3: "QUERY_OBJECT",
	4: "CREATE_OBJECT",
	5: "DELETE_OBJECT",
	6: "SBAC",
}
var Opcode_value = map[string]int32{
	"UNKNOWN":           0,
	"CHECK_TRANSACTION": 1,
	"ADD_TRANSACTION":   2,
	"QUERY_OBJECT":      3,
	"CREATE_OBJECT":     4,
	"DELETE_OBJECT":     5,
	"SBAC":              6,
}

func (x Opcode) String() string {
	return proto.EnumName(Opcode_name, int32(x))
}
func (Opcode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type ObjectStatus int32

const (
	ObjectStatus_ACTIVE   ObjectStatus = 0
	ObjectStatus_INACTIVE ObjectStatus = 1
	ObjectStatus_LOCKED   ObjectStatus = 2
)

var ObjectStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
	2: "LOCKED",
}
var ObjectStatus_value = map[string]int32{
	"ACTIVE":   0,
	"INACTIVE": 1,
	"LOCKED":   2,
}

func (x ObjectStatus) String() string {
	return proto.EnumName(ObjectStatus_name, int32(x))
}
func (ObjectStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

type SBACOpcode int32

const (
	SBACOpcode_CONSENSUS1       SBACOpcode = 0
	SBACOpcode_CONSENSUS2       SBACOpcode = 1
	SBACOpcode_PHASE1           SBACOpcode = 2
	SBACOpcode_PHASE2           SBACOpcode = 3
	SBACOpcode_COMMIT           SBACOpcode = 4
	SBACOpcode_CONSENSUS_COMMIT SBACOpcode = 5
)

var SBACOpcode_name = map[int32]string{
	0: "CONSENSUS1",
	1: "CONSENSUS2",
	2: "PHASE1",
	3: "PHASE2",
	4: "COMMIT",
	5: "CONSENSUS_COMMIT",
}
var SBACOpcode_value = map[string]int32{
	"CONSENSUS1":       0,
	"CONSENSUS2":       1,
	"PHASE1":           2,
	"PHASE2":           3,
	"COMMIT":           4,
	"CONSENSUS_COMMIT": 5,
}

func (x SBACOpcode) String() string {
	return proto.EnumName(SBACOpcode_name, int32(x))
}
func (SBACOpcode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type SBACDecision int32

const (
	SBACDecision_ACCEPT SBACDecision = 0
	SBACDecision_REJECT SBACDecision = 1
)

var SBACDecision_name = map[int32]string{
	0: "ACCEPT",
	1: "REJECT",
}
var SBACDecision_value = map[string]int32{
	"ACCEPT": 0,
	"REJECT": 1,
}

func (x SBACDecision) String() string {
	return proto.EnumName(SBACDecision_name, int32(x))
}
func (SBACDecision) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

type Transaction struct {
	Traces []*Trace `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Transaction) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type Trace struct {
	ContractID          string   `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	Procedure           string   `protobuf:"bytes,2,opt,name=procedure,proto3" json:"procedure,omitempty"`
	InputObjectsKeys    [][]byte `protobuf:"bytes,3,rep,name=inputObjectsKeys" json:"inputObjectsKeys,omitempty"`
	InputReferencesKeys [][]byte `protobuf:"bytes,4,rep,name=inputReferencesKeys" json:"inputReferencesKeys,omitempty"`
	OutputObjects       [][]byte `protobuf:"bytes,5,rep,name=outputObjects" json:"outputObjects,omitempty"`
	Parameters          [][]byte `protobuf:"bytes,6,rep,name=parameters" json:"parameters,omitempty"`
	Returns             [][]byte `protobuf:"bytes,7,rep,name=returns" json:"returns,omitempty"`
	Dependencies        []*Trace `protobuf:"bytes,8,rep,name=dependencies" json:"dependencies,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Trace) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *Trace) GetProcedure() string {
	if m != nil {
		return m.Procedure
	}
	return ""
}

func (m *Trace) GetInputObjectsKeys() [][]byte {
	if m != nil {
		return m.InputObjectsKeys
	}
	return nil
}

func (m *Trace) GetInputReferencesKeys() [][]byte {
	if m != nil {
		return m.InputReferencesKeys
	}
	return nil
}

func (m *Trace) GetOutputObjects() [][]byte {
	if m != nil {
		return m.OutputObjects
	}
	return nil
}

func (m *Trace) GetParameters() [][]byte {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Trace) GetReturns() [][]byte {
	if m != nil {
		return m.Returns
	}
	return nil
}

func (m *Trace) GetDependencies() []*Trace {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

type Object struct {
	Value  []byte       `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Key    []byte       `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Status ObjectStatus `protobuf:"varint,3,opt,name=status,proto3,enum=transactor.ObjectStatus" json:"status,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *Object) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Object) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Object) GetStatus() ObjectStatus {
	if m != nil {
		return m.Status
	}
	return ObjectStatus_ACTIVE
}

type CheckTransactionRequest struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
}

func (m *CheckTransactionRequest) Reset()                    { *m = CheckTransactionRequest{} }
func (m *CheckTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckTransactionRequest) ProtoMessage()               {}
func (*CheckTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *CheckTransactionRequest) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type CheckTransactionResponse struct {
	Ok        bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CheckTransactionResponse) Reset()                    { *m = CheckTransactionResponse{} }
func (m *CheckTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckTransactionResponse) ProtoMessage()               {}
func (*CheckTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *CheckTransactionResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CheckTransactionResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AddTransactionRequest struct {
	Tx        *Transaction      `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Evidences map[uint64][]byte `protobuf:"bytes,2,rep,name=evidences" json:"evidences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AddTransactionRequest) Reset()                    { *m = AddTransactionRequest{} }
func (m *AddTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionRequest) ProtoMessage()               {}
func (*AddTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *AddTransactionRequest) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *AddTransactionRequest) GetEvidences() map[uint64][]byte {
	if m != nil {
		return m.Evidences
	}
	return nil
}

type ObjectTraceIDPair struct {
	TraceID []byte    `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Objects []*Object `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
}

func (m *ObjectTraceIDPair) Reset()                    { *m = ObjectTraceIDPair{} }
func (m *ObjectTraceIDPair) String() string            { return proto.CompactTextString(m) }
func (*ObjectTraceIDPair) ProtoMessage()               {}
func (*ObjectTraceIDPair) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *ObjectTraceIDPair) GetTraceID() []byte {
	if m != nil {
		return m.TraceID
	}
	return nil
}

func (m *ObjectTraceIDPair) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

type ObjectList struct {
	List []*Object `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ObjectList) Reset()                    { *m = ObjectList{} }
func (m *ObjectList) String() string            { return proto.CompactTextString(m) }
func (*ObjectList) ProtoMessage()               {}
func (*ObjectList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *ObjectList) GetList() []*Object {
	if m != nil {
		return m.List
	}
	return nil
}

type AddTransactionResponse struct {
	Objects map[string]*ObjectList `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AddTransactionResponse) Reset()                    { *m = AddTransactionResponse{} }
func (m *AddTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionResponse) ProtoMessage()               {}
func (*AddTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *AddTransactionResponse) GetObjects() map[string]*ObjectList {
	if m != nil {
		return m.Objects
	}
	return nil
}

type QueryObjectRequest struct {
	ObjectKey []byte `protobuf:"bytes,1,opt,name=objectKey,proto3" json:"objectKey,omitempty"`
}

func (m *QueryObjectRequest) Reset()                    { *m = QueryObjectRequest{} }
func (m *QueryObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryObjectRequest) ProtoMessage()               {}
func (*QueryObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *QueryObjectRequest) GetObjectKey() []byte {
	if m != nil {
		return m.ObjectKey
	}
	return nil
}

type QueryObjectResponse struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *QueryObjectResponse) Reset()                    { *m = QueryObjectResponse{} }
func (m *QueryObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryObjectResponse) ProtoMessage()               {}
func (*QueryObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *QueryObjectResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type DeleteObjectRequest struct {
	ObjectKey []byte `protobuf:"bytes,1,opt,name=objectKey,proto3" json:"objectKey,omitempty"`
}

func (m *DeleteObjectRequest) Reset()                    { *m = DeleteObjectRequest{} }
func (m *DeleteObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectRequest) ProtoMessage()               {}
func (*DeleteObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *DeleteObjectRequest) GetObjectKey() []byte {
	if m != nil {
		return m.ObjectKey
	}
	return nil
}

type DeleteObjectResponse struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *DeleteObjectResponse) Reset()                    { *m = DeleteObjectResponse{} }
func (m *DeleteObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectResponse) ProtoMessage()               {}
func (*DeleteObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *DeleteObjectResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type NewObjectRequest struct {
	Object []byte `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *NewObjectRequest) Reset()                    { *m = NewObjectRequest{} }
func (m *NewObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*NewObjectRequest) ProtoMessage()               {}
func (*NewObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *NewObjectRequest) GetObject() []byte {
	if m != nil {
		return m.Object
	}
	return nil
}

type NewObjectResponse struct {
	ID []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *NewObjectResponse) Reset()                    { *m = NewObjectResponse{} }
func (m *NewObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*NewObjectResponse) ProtoMessage()               {}
func (*NewObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

func (m *NewObjectResponse) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

type SBACMessage struct {
	Op                   SBACOpcode            `protobuf:"varint,1,opt,name=op,proto3,enum=transactor.SBACOpcode" json:"op,omitempty"`
	Decision             SBACDecision          `protobuf:"varint,2,opt,name=decision,proto3,enum=transactor.SBACDecision" json:"decision,omitempty"`
	TransactionID        []byte                `protobuf:"bytes,3,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	Payload              []byte                `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	ConsensusTransaction *ConsensusTransaction `protobuf:"bytes,5,opt,name=consensusTransaction" json:"consensusTransaction,omitempty"`
}

func (m *SBACMessage) Reset()                    { *m = SBACMessage{} }
func (m *SBACMessage) String() string            { return proto.CompactTextString(m) }
func (*SBACMessage) ProtoMessage()               {}
func (*SBACMessage) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

func (m *SBACMessage) GetOp() SBACOpcode {
	if m != nil {
		return m.Op
	}
	return SBACOpcode_CONSENSUS1
}

func (m *SBACMessage) GetDecision() SBACDecision {
	if m != nil {
		return m.Decision
	}
	return SBACDecision_ACCEPT
}

func (m *SBACMessage) GetTransactionID() []byte {
	if m != nil {
		return m.TransactionID
	}
	return nil
}

func (m *SBACMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SBACMessage) GetConsensusTransaction() *ConsensusTransaction {
	if m != nil {
		return m.ConsensusTransaction
	}
	return nil
}

type ConsensusTransaction struct {
	Tx             *Transaction      `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	ID             []byte            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Evidences      map[uint64][]byte `protobuf:"bytes,3,rep,name=evidences" json:"evidences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PeerID         uint64            `protobuf:"varint,4,opt,name=peerID,proto3" json:"peerID,omitempty"`
	ConsensusRound SBACOpcode        `protobuf:"varint,5,opt,name=ConsensusRound,proto3,enum=transactor.SBACOpcode" json:"ConsensusRound,omitempty"`
}

func (m *ConsensusTransaction) Reset()                    { *m = ConsensusTransaction{} }
func (m *ConsensusTransaction) String() string            { return proto.CompactTextString(m) }
func (*ConsensusTransaction) ProtoMessage()               {}
func (*ConsensusTransaction) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

func (m *ConsensusTransaction) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *ConsensusTransaction) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ConsensusTransaction) GetEvidences() map[uint64][]byte {
	if m != nil {
		return m.Evidences
	}
	return nil
}

func (m *ConsensusTransaction) GetPeerID() uint64 {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ConsensusTransaction) GetConsensusRound() SBACOpcode {
	if m != nil {
		return m.ConsensusRound
	}
	return SBACOpcode_CONSENSUS1
}

func init() {
	proto.RegisterType((*Transaction)(nil), "transactor.Transaction")
	proto.RegisterType((*Trace)(nil), "transactor.Trace")
	proto.RegisterType((*Object)(nil), "transactor.Object")
	proto.RegisterType((*CheckTransactionRequest)(nil), "transactor.CheckTransactionRequest")
	proto.RegisterType((*CheckTransactionResponse)(nil), "transactor.CheckTransactionResponse")
	proto.RegisterType((*AddTransactionRequest)(nil), "transactor.AddTransactionRequest")
	proto.RegisterType((*ObjectTraceIDPair)(nil), "transactor.ObjectTraceIDPair")
	proto.RegisterType((*ObjectList)(nil), "transactor.ObjectList")
	proto.RegisterType((*AddTransactionResponse)(nil), "transactor.AddTransactionResponse")
	proto.RegisterType((*QueryObjectRequest)(nil), "transactor.QueryObjectRequest")
	proto.RegisterType((*QueryObjectResponse)(nil), "transactor.QueryObjectResponse")
	proto.RegisterType((*DeleteObjectRequest)(nil), "transactor.DeleteObjectRequest")
	proto.RegisterType((*DeleteObjectResponse)(nil), "transactor.DeleteObjectResponse")
	proto.RegisterType((*NewObjectRequest)(nil), "transactor.NewObjectRequest")
	proto.RegisterType((*NewObjectResponse)(nil), "transactor.NewObjectResponse")
	proto.RegisterType((*SBACMessage)(nil), "transactor.SBACMessage")
	proto.RegisterType((*ConsensusTransaction)(nil), "transactor.ConsensusTransaction")
	proto.RegisterEnum("transactor.Opcode", Opcode_name, Opcode_value)
	proto.RegisterEnum("transactor.ObjectStatus", ObjectStatus_name, ObjectStatus_value)
	proto.RegisterEnum("transactor.SBACOpcode", SBACOpcode_name, SBACOpcode_value)
	proto.RegisterEnum("transactor.SBACDecision", SBACDecision_name, SBACDecision_value)
}

func init() { proto.RegisterFile("service/transactor/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1051 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5f, 0x4f, 0xe3, 0x46,
	0x10, 0xc7, 0xce, 0x3f, 0x98, 0x98, 0xd4, 0x59, 0x38, 0xce, 0x3a, 0x9d, 0x0e, 0x64, 0xb5, 0x94,
	0xa6, 0xd7, 0xc0, 0xe5, 0xa8, 0x7a, 0xaa, 0xaa, 0x4a, 0x89, 0x6d, 0x89, 0x14, 0x48, 0xb8, 0x4d,
	0x68, 0xd5, 0x27, 0x64, 0xec, 0x05, 0x5c, 0x38, 0xdb, 0xb5, 0xd7, 0xf4, 0xf2, 0xdc, 0xaf, 0xd0,
	0xef, 0xd2, 0x97, 0x7e, 0x82, 0x3e, 0xf4, 0x23, 0xf0, 0xc0, 0x27, 0xa9, 0xbc, 0xbb, 0x89, 0x6d,
	0x12, 0xaa, 0xb6, 0xf7, 0xb6, 0xf3, 0x9b, 0xdf, 0xcc, 0xec, 0xfc, 0x66, 0x3d, 0x09, 0xbc, 0x88,
	0x49, 0x74, 0xeb, 0x39, 0x64, 0x97, 0x46, 0xb6, 0x1f, 0xdb, 0x0e, 0x0d, 0xa2, 0x5d, 0x3a, 0x09,
	0x49, 0xdc, 0x0e, 0xa3, 0x80, 0x06, 0x08, 0x32, 0xfc, 0xd9, 0x17, 0x97, 0x1e, 0xbd, 0x4a, 0xce,
	0xdb, 0x4e, 0xf0, 0x6e, 0xf7, 0x32, 0xb8, 0x0c, 0x76, 0x19, 0xe5, 0x3c, 0xb9, 0x60, 0x16, 0x33,
	0xd8, 0x89, 0x87, 0xea, 0x6f, 0xa0, 0x3e, 0x16, 0xc1, 0x5e, 0xe0, 0xa3, 0xcf, 0xa0, 0x4a, 0x23,
	0xdb, 0x21, 0xb1, 0x26, 0x6d, 0x95, 0x76, 0xea, 0x9d, 0x66, 0x3b, 0x4b, 0xdd, 0x1e, 0xa7, 0x1e,
	0x2c, 0x08, 0xfa, 0x9f, 0x32, 0x54, 0x18, 0x82, 0xda, 0x00, 0x4e, 0xe0, 0xa7, 0x30, 0xed, 0x9b,
	0x9a, 0xb4, 0x25, 0xed, 0xac, 0xf4, 0x1a, 0xf7, 0x77, 0x9b, 0x60, 0xcc, 0x50, 0x9c, 0x63, 0xa0,
	0xe7, 0xb0, 0x12, 0x46, 0x81, 0x43, 0xdc, 0x24, 0x22, 0x9a, 0x9c, 0xd2, 0x71, 0x06, 0xa0, 0x16,
	0xa8, 0x9e, 0x1f, 0x26, 0x74, 0x78, 0xfe, 0x13, 0x71, 0x68, 0x7c, 0x48, 0x26, 0xb1, 0x56, 0xda,
	0x2a, 0xed, 0x28, 0x78, 0x0e, 0x47, 0x7b, 0xb0, 0xc6, 0x30, 0x4c, 0x2e, 0x48, 0x44, 0x7c, 0x87,
	0x70, 0x7a, 0x99, 0xd1, 0x17, 0xb9, 0xd0, 0xc7, 0xb0, 0x1a, 0x24, 0x34, 0x4b, 0xa3, 0x55, 0x18,
	0xb7, 0x08, 0xa2, 0x17, 0x00, 0xa1, 0x1d, 0xd9, 0xef, 0x08, 0x25, 0x51, 0xac, 0x55, 0x19, 0x25,
	0x87, 0x20, 0x0d, 0x6a, 0x11, 0xa1, 0x49, 0xe4, 0xc7, 0x5a, 0x8d, 0x39, 0xa7, 0x26, 0xfa, 0x12,
	0x14, 0x97, 0x84, 0xc4, 0x77, 0x89, 0xef, 0x78, 0x24, 0xd6, 0x96, 0x1f, 0x93, 0xb1, 0x40, 0xd3,
	0xcf, 0xa1, 0xca, 0x6b, 0xa3, 0x75, 0xa8, 0xdc, 0xda, 0x37, 0x09, 0x61, 0x3a, 0x2a, 0x98, 0x1b,
	0x48, 0x85, 0xd2, 0x35, 0x99, 0x30, 0xb1, 0x14, 0x9c, 0x1e, 0xd1, 0x1e, 0x54, 0x63, 0x6a, 0xd3,
	0x24, 0x15, 0x47, 0xda, 0x69, 0x74, 0xb4, 0x7c, 0x09, 0x9e, 0x6b, 0xc4, 0xfc, 0x58, 0xf0, 0xf4,
	0x1e, 0x3c, 0x35, 0xae, 0x88, 0x73, 0x9d, 0x9b, 0x37, 0x26, 0x3f, 0x27, 0x24, 0xa6, 0xe8, 0x53,
	0x90, 0xe9, 0x7b, 0x56, 0xb1, 0xde, 0x79, 0xfa, 0xe0, 0xae, 0x33, 0xae, 0x4c, 0xdf, 0xeb, 0x07,
	0xa0, 0xcd, 0xe7, 0x88, 0xc3, 0xc0, 0x8f, 0x09, 0x6a, 0x80, 0x1c, 0x5c, 0xb3, 0x24, 0xcb, 0x58,
	0x0e, 0xae, 0xd3, 0x31, 0xc7, 0xde, 0xa5, 0x6f, 0xd3, 0xe9, 0x98, 0x15, 0x9c, 0x01, 0xfa, 0x5f,
	0x12, 0x3c, 0xe9, 0xba, 0xee, 0x07, 0x5c, 0x06, 0x0d, 0x60, 0x85, 0xdc, 0x7a, 0x2e, 0x1b, 0xae,
	0x26, 0x33, 0xa1, 0xf7, 0xf2, 0xfc, 0x85, 0xe9, 0xdb, 0xd6, 0x34, 0xc4, 0xf2, 0x69, 0x34, 0xc1,
	0x59, 0x8a, 0x67, 0xdf, 0x40, 0xa3, 0xe8, 0x9c, 0xca, 0x9e, 0xde, 0xa5, 0xcc, 0x65, 0x9f, 0x8d,
	0x47, 0xce, 0x8d, 0xe7, 0x6b, 0xf9, 0x8d, 0xa4, 0x5f, 0x41, 0x93, 0xcb, 0xce, 0xe6, 0xdb, 0x37,
	0x4f, 0x6c, 0x2f, 0x42, 0x9f, 0x40, 0x8d, 0x72, 0x93, 0xcf, 0xb3, 0x57, 0xbf, 0xbf, 0xdb, 0xac,
	0x09, 0x06, 0x9e, 0xfa, 0xd0, 0x4b, 0xa8, 0x05, 0xe2, 0x3d, 0xf2, 0x3e, 0xd0, 0xfc, 0x34, 0xf1,
	0x94, 0xa2, 0xef, 0x03, 0x70, 0xe8, 0xc8, 0x8b, 0x29, 0xda, 0x86, 0xf2, 0x8d, 0x17, 0x53, 0xf1,
	0xc1, 0x2e, 0x0a, 0x64, 0x7e, 0xfd, 0x77, 0x09, 0x36, 0x1e, 0x2a, 0x22, 0x26, 0xd7, 0xcf, 0xca,
	0xf3, 0x2c, 0xbb, 0xff, 0x24, 0x23, 0x0f, 0x12, 0xc9, 0x85, 0x8a, 0xd3, 0xf8, 0x67, 0x18, 0x94,
	0xbc, 0x23, 0xaf, 0xe0, 0x0a, 0x57, 0xf0, 0x65, 0x5e, 0xc1, 0x7a, 0x67, 0x63, 0xfe, 0xc2, 0x69,
	0x5b, 0x79, 0x65, 0x3b, 0x80, 0xde, 0x26, 0x24, 0x9a, 0x88, 0x76, 0xc4, 0x33, 0x79, 0x0e, 0x2b,
	0xbc, 0xe8, 0xa1, 0xc8, 0xaf, 0xe0, 0x0c, 0xd0, 0xbb, 0xb0, 0x56, 0x88, 0x11, 0x9d, 0xb6, 0xa0,
	0xca, 0x39, 0xe2, 0x7d, 0x2d, 0x92, 0x4b, 0x30, 0xf4, 0xd7, 0xb0, 0x66, 0x92, 0x1b, 0x42, 0xc9,
	0x7f, 0xa9, 0xdb, 0x83, 0xf5, 0x62, 0xd0, 0xff, 0x28, 0xdc, 0x02, 0x75, 0x40, 0x7e, 0x29, 0x56,
	0xdd, 0x28, 0xc4, 0x2b, 0x33, 0xee, 0xe7, 0xd0, 0xcc, 0x71, 0x45, 0xb1, 0x0d, 0x90, 0x3d, 0x57,
	0x3c, 0xb8, 0xea, 0xfd, 0xdd, 0xa6, 0xdc, 0x37, 0xb1, 0xec, 0xb9, 0xfa, 0x6f, 0x32, 0xd4, 0x47,
	0xbd, 0xae, 0x71, 0x4c, 0xe2, 0xd8, 0xbe, 0x24, 0x68, 0x1b, 0xe4, 0x20, 0x64, 0xbc, 0x46, 0x71,
	0x0e, 0x29, 0x69, 0x18, 0x3a, 0x81, 0x4b, 0xb0, 0x1c, 0x84, 0x68, 0x1f, 0x96, 0x5d, 0xe2, 0x78,
	0xb1, 0x17, 0xf8, 0x6c, 0x6a, 0x0f, 0xb6, 0x4d, 0xca, 0x36, 0x85, 0x1f, 0xcf, 0x98, 0xe8, 0x2b,
	0x58, 0xa5, 0xd9, 0xbb, 0xe9, 0x9b, 0x6c, 0x51, 0x29, 0xbd, 0xe6, 0xfd, 0xdd, 0xe6, 0xea, 0x38,
	0xef, 0xc0, 0x45, 0x5e, 0xba, 0x5d, 0x43, 0x7b, 0x72, 0x13, 0xd8, 0xae, 0x56, 0x66, 0xcd, 0x4e,
	0x4d, 0x34, 0x86, 0x75, 0x27, 0xed, 0xd0, 0x8f, 0x93, 0x38, 0x97, 0x42, 0xab, 0x30, 0x4d, 0xb7,
	0xf2, 0x97, 0x32, 0x16, 0xf0, 0xf0, 0xc2, 0x68, 0xfd, 0x0f, 0x19, 0xd6, 0x17, 0xd1, 0xff, 0xfd,
	0x26, 0xe2, 0x82, 0xcb, 0x0f, 0x05, 0x47, 0xc7, 0xf9, 0x0d, 0x55, 0x9a, 0xff, 0xb4, 0x16, 0x55,
	0x7d, 0x7c, 0x41, 0xa5, 0x8f, 0x20, 0x24, 0x24, 0xea, 0x9b, 0x4c, 0x97, 0x32, 0x16, 0x16, 0xfa,
	0x16, 0x1a, 0xb3, 0x4c, 0x38, 0x48, 0x7c, 0x97, 0x09, 0xf2, 0xf8, 0x4c, 0x1f, 0xb0, 0x3f, 0x6c,
	0xf1, 0xb5, 0x7e, 0x95, 0xa0, 0xca, 0x13, 0xa3, 0x3a, 0xd4, 0x4e, 0x07, 0x87, 0x83, 0xe1, 0x0f,
	0x03, 0x75, 0x09, 0x3d, 0x81, 0xa6, 0x71, 0x60, 0x19, 0x87, 0x67, 0x63, 0xdc, 0x1d, 0x8c, 0xba,
	0xc6, 0xb8, 0x3f, 0x1c, 0xa8, 0x12, 0x5a, 0x83, 0x8f, 0xba, 0xa6, 0x59, 0x00, 0x65, 0xa4, 0x82,
	0xf2, 0xf6, 0xd4, 0xc2, 0x3f, 0x9e, 0x0d, 0x7b, 0xdf, 0x59, 0xc6, 0x58, 0x2d, 0xa1, 0x26, 0xac,
	0x1a, 0xd8, 0xea, 0x8e, 0xad, 0x29, 0x54, 0x4e, 0x21, 0xd3, 0x3a, 0xb2, 0x32, 0xa8, 0x82, 0x96,
	0xa1, 0x9c, 0xf6, 0xa5, 0x56, 0x5b, 0xfb, 0xd3, 0xc5, 0xc3, 0x7f, 0xf5, 0x10, 0x40, 0x35, 0xcd,
	0xfe, 0xbd, 0xa5, 0x2e, 0x21, 0x05, 0x96, 0xfb, 0x03, 0x61, 0x49, 0xa9, 0xe7, 0x68, 0x68, 0x1c,
	0x5a, 0xa6, 0x2a, 0xb7, 0x2e, 0x00, 0x32, 0x5d, 0x50, 0x03, 0xc0, 0x18, 0x0e, 0x46, 0xd6, 0x60,
	0x74, 0x3a, 0x7a, 0xa5, 0x2e, 0x15, 0xec, 0x0e, 0x8f, 0x3c, 0x39, 0xe8, 0x8e, 0xac, 0x57, 0xaa,
	0x3c, 0x3b, 0x77, 0xd4, 0x52, 0x7a, 0x36, 0x86, 0xc7, 0xc7, 0xfd, 0xf4, 0x92, 0xeb, 0xa0, 0xce,
	0x62, 0xce, 0x04, 0x5a, 0x69, 0x6d, 0x83, 0x92, 0xff, 0x4a, 0xf8, 0xed, 0x0c, 0xeb, 0x64, 0xac,
	0x2e, 0xa5, 0x67, 0x6c, 0xb1, 0x7e, 0xa4, 0xf3, 0x2a, 0xfb, 0x57, 0xf6, 0xfa, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x51, 0x77, 0xba, 0x89, 0xf2, 0x09, 0x00, 0x00,
}
