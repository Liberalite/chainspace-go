// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import sbac "chainspace.io/chainspace-go/sbac"
import service "chainspace.io/chainspace-go/service"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, tx
func (_m *Service) Check(ctx context.Context, tx *sbac.Transaction) (bool, error) {
	ret := _m.Called(ctx, tx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *sbac.Transaction) bool); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sbac.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAndSign provides a mock function with given fields: ctx, tx
func (_m *Service) CheckAndSign(ctx context.Context, tx *sbac.Transaction) (bool, []byte, error) {
	ret := _m.Called(ctx, tx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *sbac.Transaction) bool); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(context.Context, *sbac.Transaction) []byte); ok {
		r1 = rf(ctx, tx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *sbac.Transaction) error); ok {
		r2 = rf(ctx, tx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Handle provides a mock function with given fields: peerID, msg
func (_m *Service) Handle(peerID uint64, msg *service.Message) (*service.Message, error) {
	ret := _m.Called(peerID, msg)

	var r0 *service.Message
	if rf, ok := ret.Get(0).(func(uint64, *service.Message) *service.Message); ok {
		r0 = rf(peerID, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, *service.Message) error); ok {
		r1 = rf(peerID, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Service) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
